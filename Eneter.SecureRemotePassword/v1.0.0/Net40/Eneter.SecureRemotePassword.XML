<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Eneter.SecureRemotePassword</name>
    </assembly>
    <members>
        <member name="T:Eneter.SecureRemotePassword.LoginRequestMessage">
            <summary>
            Data message to send the login request from client to service.
            </summary>
            <remarks>
            Client sends this message to initiate the authentication.
            </remarks>
        </member>
        <member name="P:Eneter.SecureRemotePassword.LoginRequestMessage.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Eneter.SecureRemotePassword.LoginRequestMessage.A">
            <summary>
            Client public ephemeral value 'A'
            </summary>
        </member>
        <member name="T:Eneter.SecureRemotePassword.LoginResponseMessage">
            <summary>
            Data message to send from service to client as a response for the login.
            </summary>
        </member>
        <member name="P:Eneter.SecureRemotePassword.LoginResponseMessage.s">
            <summary>
            User salt 's'.
            </summary>
        </member>
        <member name="P:Eneter.SecureRemotePassword.LoginResponseMessage.B">
            <summary>
            Service public ephemeral value 'B'
            </summary>
        </member>
        <member name="T:Eneter.SecureRemotePassword.SRP">
            <summary>
            Sercure Remote Password (SRP-6a).
            </summary>
            <remarks>
            Provides functionality for implementing Secure Remote Password protocol.
            Names of methods match the naming convention which is defined in the protocol specification:<br/>
            http://srp.stanford.edu/design.html
            
            Here is the summary of SRP parameters:
            N       A large safe prime(N = 2q+1, where q is prime)
                    All arithmetic is done modulo N.
            g       A generator modulo N
            k       Multiplier parameter
            s       User's salt
            I       Username
            p       Cleartext Password
            H()     One-way hash function
            ^       (Modular) Exponentiation
            u       Random scrambling parameter
            a, b    Secret ephemeral values
            A, B    Public ephemeral values
            x       Private key(derived from p and s)
            v       Password verifier
            </remarks>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.CustomInit(System.Byte[])">
            <summary>
            Allows to setup a different large prime number.
            </summary>
            <param name="largePrimeNumber"></param>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.s">
            <summary>
            Generates 16 byte salt.
            </summary>
            <returns>salt 's'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.x(System.String,System.Byte[])">
            <summary>
            Calculates user private key 'x' from user-password and salt.
            </summary>
            <remarks>
            Note that this key is not supposed to be stored. Database of users should store only salt 's' and verifier 'v'.
            </remarks>
            <param name="password">text of user password 'p'</param>
            <param name="sBytes">salt 's'</param>
            <returns>user private key 'x'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.v(System.Byte[])">
            <summary>
            Calculates verifier 'v' from the user private key 'x'.
            </summary>
            <param name="xBytes">user private key 'x'</param>
            <returns>verifier 'v'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.a">
            <summary>
            Generates secret ephemeral value 'a' for client.
            </summary>
            <returns>client secret ephemeral value 'a'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.A(System.Byte[])">
            <summary>
            Calculates public ephemeral value 'A' for client.
            </summary>
            <param name="aBytes">client secret ephemeral value 'a'</param>
            <returns>client public ephemeral value 'A'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.IsValid_A(System.Byte[])">
            <summary>
            Used by the service to check public ephemeral value 'A' from the client.
            </summary>
            <param name="ABytes">client public ephemeral value</param>
            <returns>true if the value is ok</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.b">
            <summary>
            Generates secret ephemeral value 'b' for service.
            </summary>
            <returns>service secret ephemeral value 'b'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.B(System.Byte[],System.Byte[])">
            <summary>
            Calculates public ephemeral value 'B' for service.
            </summary>
            <param name="bBytes">service secret ephemeral value 'b'</param>
            <param name="vBytes">verifier 'v'</param>
            <returns>service public ephemeral value 'B'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.u(System.Byte[],System.Byte[])">
            <summary>
            Calculates random scrambling parameter.
            </summary>
            <param name="ABytes">client public ephemeral value 'A'</param>
            <param name="BBytes">service public ephemeral value 'B'</param>
            <returns>random scrambling parameter</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.IsValid_B_u(System.Byte[],System.Byte[])">
            <summary>
            Used by the client to check public ephemeral value 'B' from the client
            and to check calculated scrambling parameter.
            </summary>
            <param name="BBytes">service public ephemeral value 'B</param>
            <param name="uBytes">random scrambling parameter 'u'</param>
            <returns></returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.K_Client(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Calculates session key 'K' for the client.
            </summary>
            <param name="BBytes">service public ephemeral value 'B'</param>
            <param name="xBytes">user private key 'x'</param>
            <param name="uBytes">random scrambling parameter</param>
            <param name="aBytes">client secret ephemeral value 'a'</param>
            <returns>session key 'K'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.K_Service(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Calculates session key 'K' for service.
            </summary>
            <param name="ABytes">client public ephemeral value 'A'</param>
            <param name="vBytes">verifier 'v'</param>
            <param name="uBytes">random scrambling parameter</param>
            <param name="bBytes">service secret ephemeral value 'b'</param>
            <returns>session key 'K'</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.M1(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Calculates evidence message 'M1' which can be sent from client to service.
            </summary>
            <param name="ABytes">client public ephemeral value 'A'</param>
            <param name="BBytes">service public ephemeral value 'B'</param>
            <param name="KBytes">session key 'K'</param>
            <returns>evidence message</returns>
        </member>
        <member name="M:Eneter.SecureRemotePassword.SRP.M2(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Calculates evidence message 'M2' which can be sent from service to client.
            </summary>
            <param name="ABytes">client public ephemeral value 'A'</param>
            <param name="M1Bytes">evidence message 'M1' received from the client</param>
            <param name="KBytes">session key 'K'</param>
            <returns>evidence message</returns>
        </member>
    </members>
</doc>
